"use strict";const config={networkUrl:{main:"https://service.goldmint.io/sumus/mainnet/v1",test:"https://service.goldmint.io/sumus/testnet/v1"},api:{getBalance:"/wallet/"}};var isLoggedIn=!1,isFirefox="undefined"!=typeof InstallTrigger,brows=isFirefox?browser:chrome,script=document.createElement("script");function http(e,t,s=""){let n=new XMLHttpRequest,o="GET"===e.toUpperCase()?t+s:t;return n.open(e.toUpperCase(),o,!0),n.setRequestHeader("Content-Type","application/json"),"GET"===e.toUpperCase()?n.send():n.send(JSON.stringify(s)),new Promise((e,t)=>{n.onload=(()=>{if(n.status>=200&&n.status<300)try{e(JSON.parse(n.responseText))}catch(t){e(null)}else e(null)})})}script.setAttribute("type","text/javascript"),script.setAttribute("src",brows.extension.getURL("inpage.js")),document.documentElement.insertBefore(script,document.head),brows.runtime.onMessage.addListener((e,t,s)=>{e.hasOwnProperty("loginStatus")&&isLoggedIn!==e.loginStatus&&(isLoggedIn=e.loginStatus),e.hasOwnProperty("login")&&(isLoggedIn=e.login)}),brows.runtime.sendMessage({checkLoginStatus:!0}),window.addEventListener("message",e=>{if(e&&e.data&&"question"===e.data.type&&e.data.resource in actions){let t=void 0;try{t=JSON.parse(e.data.data)}catch(e){}window.postMessage&&actions[e.data.resource](t).then(t=>{try{window.postMessage({type:"answer",id:e.data.id,isSuccess:!0,data:t},"*")}catch(e){}},t=>{try{window.postMessage({type:"answer",id:e.data.id,isSuccess:!1,data:t},"*")}catch(e){}})}});var actions={getAccount:e=>new Promise((e,t)=>{brows.runtime.onMessage.addListener(function t(s,n,o){s.hasOwnProperty("loginStatus")&&(isLoggedIn=s.loginStatus,brows.storage.local.get(null,s=>{e(isLoggedIn?[s.wallets[s.currentWallet].publicKey]:[]),brows.runtime.onMessage.removeListener(t)}))}),brows.runtime.sendMessage({checkLoginStatus:!0})}),getCurrentNetwork:e=>new Promise((e,t)=>{brows.runtime.onMessage.addListener(function t(s,n,o){s.hasOwnProperty("loginStatus")&&(isLoggedIn=s.loginStatus,brows.storage.local.get(null,s=>{e(isLoggedIn&&s.currentNetwork?s.currentNetwork:null),brows.runtime.onMessage.removeListener(t)}))}),brows.runtime.sendMessage({checkLoginStatus:!0})}),getBalance:e=>new Promise((t,s)=>{brows.runtime.onMessage.addListener(function s(n,o,r){n.hasOwnProperty("loginStatus")&&(isLoggedIn=n.loginStatus,brows.storage.local.get(null,n=>{let o=config.networkUrl[n.currentNetwork];isLoggedIn?http("GET",o+config.api.getBalance,e.address).then(e=>{e?(t({gold:e.res.balance.gold,mint:e.res.balance.mint}),brows.runtime.onMessage.removeListener(s)):(t(null),brows.runtime.onMessage.removeListener(s))}):(t(null),brows.runtime.onMessage.removeListener(s))}))}),brows.runtime.sendMessage({checkLoginStatus:!0})}),sendTransaction:e=>new Promise((t,s)=>{brows.runtime.onMessage.addListener(function s(n,o,r){if(n.hasOwnProperty("loginStatus")){if(!(isLoggedIn=n.loginStatus))return brows.runtime.onMessage.removeListener(s),t(null);brows.storage.local.get(null,n=>{const o=Math.random().toString(36).substr(2,9),r=n.wallets[n.currentWallet].publicKey;let i={id:o,from:r,to:e.to,token:e.token,amount:e.amount,network:n.currentNetwork},a=[];n.unconfirmedTx&&(a=n.unconfirmedTx),a.push(i),brows.storage.local.set({unconfirmedTx:a},()=>{brows.runtime.sendMessage({sendTransaction:o}),brows.runtime.onMessage.removeListener(s)}),brows.runtime.onMessage.addListener(function e(s,n,r){s.hasOwnProperty("sendTxResultContent")&&s.sendTxResultContent.id===o&&(t(s.sendTxResultContent.hash),brows.runtime.onMessage.removeListener(e))})})}}),brows.runtime.sendMessage({checkLoginStatus:!0})})};