"use strict";const config={networkUrl:{main:"https://service.goldmint.io/mint/mainnet/v1",test:"https://service.goldmint.io/mint/testnet/v1"},api:{getBalance:"/wallet/"}};var isLoggedIn=!1,isFirefox="undefined"!=typeof InstallTrigger,brows=isFirefox?browser:chrome,script=document.createElement("script");function http(e,s,t=""){let n=new XMLHttpRequest,o="GET"===e.toUpperCase()?s+t:s;return n.open(e.toUpperCase(),o,!0),n.setRequestHeader("Content-Type","application/json"),"GET"===e.toUpperCase()?n.send():n.send(JSON.stringify(t)),new Promise((e,s)=>{n.onload=(()=>{if(n.status>=200&&n.status<300)try{e(JSON.parse(n.responseText))}catch(s){e(null)}else e(null)})})}function generateId(){return Math.random().toString(36).substr(2,9)}script.setAttribute("type","text/javascript"),script.setAttribute("src",brows.extension.getURL("inpage.js")),document.documentElement.insertBefore(script,document.head),brows.runtime.onMessage.addListener((e,s,t)=>{e.hasOwnProperty("loginStatus")&&isLoggedIn!==e.loginStatus&&(isLoggedIn=e.loginStatus),e.hasOwnProperty("login")&&(isLoggedIn=e.login)}),brows.runtime.sendMessage({checkLoginStatus:!0}),window.addEventListener("message",e=>{if(e&&e.data&&"question"===e.data.type&&e.data.resource in actions){let s=void 0;try{s=JSON.parse(e.data.data)}catch(e){}window.postMessage&&actions[e.data.resource](s).then(s=>{try{window.postMessage({type:"answer",id:e.data.id,isSuccess:!0,data:s},"*")}catch(e){}},s=>{try{window.postMessage({type:"answer",id:e.data.id,isSuccess:!1,data:s},"*")}catch(e){}})}}),console.warn("INIT");var actions={getAccount:e=>new Promise((e,s)=>{brows.runtime.onMessage.addListener(function s(t,n,o){brows.runtime.onMessage.removeListener(s),t.hasOwnProperty("loginStatus")&&(isLoggedIn=t.loginStatus,brows.storage.local.get(null,s=>{e(isLoggedIn?[s.wallets[s.currentWallet].publicKey]:[])}))}),brows.runtime.sendMessage({checkLoginStatus:!0})}),getCurrentNetwork:e=>new Promise((e,s)=>{brows.runtime.onMessage.addListener(function s(t,n,o){brows.runtime.onMessage.removeListener(s),t.hasOwnProperty("loginStatus")&&(isLoggedIn=t.loginStatus,brows.storage.local.get(null,s=>{e(isLoggedIn?s.currentNetwork||"main":null)}))}),brows.runtime.sendMessage({checkLoginStatus:!0})}),getBalance:e=>new Promise((s,t)=>{brows.runtime.onMessage.addListener(function t(n,o,r){brows.runtime.onMessage.removeListener(t),n.hasOwnProperty("loginStatus")&&(isLoggedIn=n.loginStatus,brows.storage.local.get(null,t=>{let n=config.networkUrl[t.currentNetwork||"main"];isLoggedIn?http("GET",n+config.api.getBalance,e.address).then(e=>{s(e?{gold:e.res.balance.gold,mint:e.res.balance.mint}:null)}):s(null)}))}),brows.runtime.sendMessage({checkLoginStatus:!0})}),sendTransaction:e=>new Promise((s,t)=>{brows.runtime.onMessage.addListener(function t(n,o,r){if(n.hasOwnProperty("loginStatus")){if(!(isLoggedIn=n.loginStatus))return brows.runtime.onMessage.removeListener(t),s(null);brows.storage.local.get(null,n=>{const o=generateId(),r=n.wallets[n.currentWallet].publicKey;let i={id:o,from:r,to:e.to,token:e.token,amount:e.amount,network:n.currentNetwork||"main"},a=[];n.unconfirmedTx&&(a=n.unconfirmedTx),a.push(i),brows.storage.local.set({unconfirmedTx:a},()=>{brows.runtime.sendMessage({sendTransaction:o}),brows.runtime.onMessage.removeListener(t)}),brows.runtime.onMessage.addListener(function e(t,n,r){t.hasOwnProperty("sendTxResultContent")&&t.sendTxResultContent.id===o&&(s(t.sendTxResultContent.hash),brows.runtime.onMessage.removeListener(e))})})}}),brows.runtime.sendMessage({checkLoginStatus:!0})}),openSendTokenPage:e=>new Promise((s,t)=>{brows.runtime.onMessage.addListener(function t(n,o,r){if(n.hasOwnProperty("loginStatus")){if(!(isLoggedIn=n.loginStatus))return brows.runtime.onMessage.removeListener(t),s(null);const o={address:e.address,token:e.token,amount:e.amount};brows.storage.local.set({openSendTokenPage:o},()=>{brows.runtime.sendMessage({openSendTokenPage:e}),brows.runtime.onMessage.removeListener(t),s(!0)})}}),brows.runtime.sendMessage({checkLoginStatus:!0})}),signMessage:e=>new Promise((s,t)=>{brows.runtime.onMessage.addListener(function t(n,o,r){if(n.hasOwnProperty("loginStatus")){if(!(isLoggedIn=n.loginStatus))return brows.runtime.onMessage.removeListener(t),s(null);if(!e.bytes||"object"!=typeof e.bytes)return s(null);brows.storage.local.get(null,n=>{const o=generateId(),r=e.publicKey||n.wallets[n.currentWallet].publicKey,i=window.location.host;let a,g=document.querySelectorAll("link");[].forEach.call(g,e=>{e.rel.indexOf("icon")>=0&&(a=e.href)});let u={id:o,bytes:e.bytes,publicKey:r,host:i,iconUrl:a||null},l=[];n.messagesForSign&&(l=n.messagesForSign),l.push(u),brows.storage.local.set({messagesForSign:l},()=>{brows.runtime.sendMessage({signMessage:o}),brows.runtime.onMessage.removeListener(t)}),brows.runtime.onMessage.addListener(function e(t,n,r){t.hasOwnProperty("sendSignResultContent")&&t.sendSignResultContent.id===o&&(s(t.sendSignResultContent.result),brows.runtime.onMessage.removeListener(e))})})}}),brows.runtime.sendMessage({checkLoginStatus:!0})}),verifySignature:e=>new Promise((s,t)=>{s(e.result)}),getGoWasmJsPath:e=>new Promise((e,s)=>{e(brows.extension.getURL("assets/libs/mint/gowasm.js"))}),getMintWasmPath:e=>new Promise((e,s)=>{e(brows.extension.getURL("assets/libs/mint/mint.wasm"))})};
